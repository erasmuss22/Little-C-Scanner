import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
 // fields
    int linenum;
    int charnum;
 // constructor
    TokenVal(int l, int c) {
        linenum = l;
	charnum = c;
    }
}

class IntLitTokenVal extends TokenVal {
 // new field: the value of the integer literal
    int intVal;
 // constructor
    IntLitTokenVal(int l, int c, int val) {
        super(l,c);
	intVal = val;
    }
}

class DblLitTokenVal extends TokenVal {
 // new field: the value of the double literal
    double dblVal;
 // constructor
    DblLitTokenVal(int l, int c, double val) {
        super(l,c);
	dblVal = val;
    }
}

class IdTokenVal extends TokenVal {
 // new field: the value of the identifier
    String idVal;
 // constructor
    IdTokenVal(int l, int c, String val) {
        super(l,c);
	idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
 // new field: the value of the string literal
    String strVal;
 // constructor
    StrLitTokenVal(int l, int c, String val) {
        super(l,c);
	strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
  static int num=1;
}
%%
LETTER=     [a-zA-Z]
DIGIT=		[0-9]
WHITESPACE=	[\ \t]
DOT=     "."
USCORE=  "_"
STRINGS= (\\\"|[^\n\"]|\\{WHITESPACE}+\\)*
BADESC= {STRINGS}((\\[^nt\\\"\'])+|(\\[ ]+)){STRINGS}
UNTERM= {STRINGS}((\\[\"])+|[\n])
BADSTR= {STRINGS}(\\[\"])
BACKSLASH= {STRINGS}(\\\\)+
COMMENT_TEXT= ([^/*\n]|[^*\n]"/"[^*\n]|[^/\n]"*"[^/\n]|"*"[^/\n]|"/"[^*\n])*

%{
   private int comment_count = 0;
%}

// The next 3 lines are included so that we can use the generated scanner
// with java CUP (the Java parser generator)
%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

// Tell JLex what to do on end-of-file
%eofval{
return new Symbol(sym.EOF);
%eofval}

// Turn on line counting
%line
%state COMMENT
%%

{DIGIT}+   {// NOTE: the following computation of the integer value does NOT
	    //       check for overflow.  This must be changed.
	    double d = (new Double(yytext())).doubleValue();
	    if (d > Integer.MAX_VALUE){
	    	Errors.warn(yyline+1, CharNum.num,
			 		"integer literal too large; using max value " + yytext());
	    			for (int i = 0; i < Integer.MAX_VALUE / 10; i++){
	    				CharNum.num++;
	    			}
	    			Symbol S = new Symbol(sym.INTLITERAL,
			          new IntLitTokenVal(yyline+1, CharNum.num, Integer.MAX_VALUE));
			          return S;
	    }
	    else{
	    int val = (new Integer(yytext())).intValue();
	    Symbol S = new Symbol(sym.INTLITERAL,
			          new IntLitTokenVal(yyline+1, CharNum.num, val)
				 );
	    CharNum.num += yytext().length();
	    return S;
	    }
	   }

\n	   {CharNum.num = 1;}


{WHITESPACE}+  {CharNum.num += yytext().length();}

<YYINITIAL> "+"	   {Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>"int"  {Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 3; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

	    
<YYINITIAL>"double" {Symbol S = new Symbol(sym.DBL, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 6; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"void"  {Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 4; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"if"   {Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   			}

<YYINITIAL>"else" {Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 4; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"while" {Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 5; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"return" {Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 6; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"scanf" {Symbol S = new Symbol(sym.SCANF, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 5; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"printf" {Symbol S = new Symbol(sym.PRINTF, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 6; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL> ({USCORE}|{LETTER})({LETTER}|{DIGIT}|{USCORE})* {Symbol S = new Symbol(sym.ID, 
					new IdTokenVal(yyline+1, CharNum.num, yytext()));
	    			for (int i = 0; i < yytext().length(); i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}
		

<YYINITIAL> {DIGIT}+{DOT}{DIGIT}+ {Symbol S = new Symbol(sym.DBLLITERAL, new 
				DblLitTokenVal(yyline+1, CharNum.num, (new Double(yytext())).doubleValue()));
					for (int i = 0; i < yytext().length(); i++){
	    				CharNum.num++;
	    			}
					return S;
					}
					
<YYINITIAL> {DIGIT}*{DOT}{DIGIT}+ {Symbol S = new Symbol(sym.DBLLITERAL, new 
				DblLitTokenVal(yyline+1, CharNum.num, (new Double(yytext())).doubleValue()));
					for (int i = 0; i < yytext().length(); i++){
	    				CharNum.num++;
	    			}
					return S;
					}
					
<YYINITIAL> {DIGIT}+{DOT}{DIGIT}* {Symbol S = new Symbol(sym.DBLLITERAL, new 
				DblLitTokenVal(yyline+1, CharNum.num, (new Double(yytext())).doubleValue()));
					for (int i = 0; i < yytext().length(); i++){
	    				CharNum.num++;
	    			}
					return S;
					}					

<YYINITIAL> \"{BADESC}\"   {Errors.fatal(yyline+1, CharNum.num,
			 		"ignoring string literal with bad escaped character");
	    			for (int i = 0; i < yytext().length(); i++) {
				   CharNum.num++;
				}
	  		    }

<YYINITIAL> \"{BACKSLASH}\"  {Symbol S = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
	    			for (int i = 0; i < yytext().length(); i++) {
				   CharNum.num++;
				}
	   			 return S;
	  		    }

<YYINITIAL> \"{BADSTR}   {Errors.fatal(yyline+1, CharNum.num,
			 		"ignoring unterminated string literal");
	    			for (int i = 0; i < yytext().length(); i++) {
				   CharNum.num++;
				}
	  		    } 

<YYINITIAL> \"{STRINGS}\"  {Symbol S = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
	    			for (int i = 0; i < yytext().length(); i++) {
				   CharNum.num++;
				}
	   			 return S;
	  		    }	 

  

<YYINITIAL> \"{BADESC}   {Errors.fatal(yyline+1, CharNum.num,
			 		"ignoring unterminated string literal with bad escaped character");
	    			for (int i = 0; i < yytext().length(); i++) {
				   CharNum.num++;
				}
	  		    }

<YYINITIAL> \"<UNTERM>   {Errors.fatal(yyline+1, CharNum.num,
			 		"ignoring unterminated string literal");
	    			for (int i = 0; i < yytext().length(); i++) {
				   CharNum.num++;
				}
	  		    }

<YYINITIAL> \"{STRINGS}  {Errors.fatal(yyline+1, CharNum.num,
			 		"ignoring unterminated string literal");
	    			for (int i = 0; i < yytext().length(); i++) {
				   CharNum.num++;
				}
	  		    }


<YYINITIAL>"{"    {Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>"}"    {Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>"("    {Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>")"    {Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>","    {Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   			}

<YYINITIAL>"="    {Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>";"    {Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>"-"    {Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>"*"    {Symbol S = new Symbol(sym.STAR, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>"/"    {Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
       				}

<YYINITIAL>"++"   {Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"--"   {Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"!"    {Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>"&&"   {Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}
	   
<YYINITIAL>"||")  {Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"=="   {Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"!="   {Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"<"    {Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>">"    {Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}

<YYINITIAL>"<="   {Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>">="   {Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 2; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL>"&"    {Symbol S = new Symbol(sym.AMPERSAND, new TokenVal(yyline+1, CharNum.num));
	    			CharNum.num++;
	    			return S;
	   				}


<YYINITIAL>"\"%d\"" {Symbol S = new Symbol(sym.INT_FORMAT, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 4; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}
	   


<YYINITIAL>"\"%f\"" {Symbol S = new Symbol(sym.DBL_FORMAT, new TokenVal(yyline+1, CharNum.num));
	    			for (int i = 0; i < 4; i++){
	    				CharNum.num++;
	    			}
	    			return S;
	   				}

<YYINITIAL> "/*" { yybegin(COMMENT); comment_count = comment_count + 1;
		   CharNum.num += 2; }

<COMMENT> "/*"   { comment_count = comment_count + 1;
		   CharNum.num += 2; }
<COMMENT> "*/"   { comment_count = comment_count - 1;
		   CharNum.num += yytext().length();
		  if (comment_count == 0) {
			yybegin(YYINITIAL);
		  }
	         }
<COMMENT> {COMMENT_TEXT} { CharNum.num += yytext().length(); }

<COMMENT> {COMMENT_TEXT}\n     
		  { CharNum.num += yytext().length();
		   Errors.fatal(yyline+1, CharNum.num,
			 		"unterminated comment");
		  yybegin(YYINITIAL);
		 }

<COMMENT> \n     { CharNum.num += 1;
		   Errors.fatal(yyline+1, CharNum.num,
			 		"unterminated comment");
		  yybegin(YYINITIAL);
		 }

	   				
<YYINITIAL>.	   {Errors.fatal(yyline+1, CharNum.num,
			 		"ignoring illegal character: " + yytext());
	    			CharNum.num++;
	   				}	   				
